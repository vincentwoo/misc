#!/usr/bin/ruby

require 'set'

@sets = Set.new

def process_name(name)
    return @names_to_index[name] if @names_to_index.include? name
    @sparse.push({})
    @names.push name
    @names_to_index[name] = @names_to_index.size
end

def ingest(input)
    @names = []
    @names_to_index = {}
    @sparse = []
    delim = ' '
    File.foreach(input) do |line|
        line = line.split delim
        to = process_name line.pop
        from = process_name line.pop
        if @sparse[to][from].nil?
            @sparse[from][to] = false
        elsif not @sparse[to][from]
            @sparse[to][from] = @sparse[from][to] = true
        end
    end
    @sparse.collect! {|row| row.reject{|k, v| !v}.keys.to_set}
end

def list_maximal(set, points, exclude)
    @sets.add set if points.empty? and exclude.empty? and set.size > 2
    for vertex in points
        list_maximal(set + [vertex],
                     points & @sparse[vertex],
                     exclude & @sparse[vertex])
        points.delete vertex
        exclude.add vertex
    end
end

exit unless ARGV.size == 1
ingest(ARGV[0])
list_maximal(Set.new, (0..@sparse.length-1).to_set, Set.new)

output = @sets.collect {|set| set.collect {|i| @names[i]}.sort.join(', ')}
output.sort.each {|line| puts line}
