#!/usr/bin/ruby

require 'set'

@names = []
@names_to_index = {}
@sparse = []
@sets = Set.new
@seen = Set.new

def process_name(name)
    return @names_to_index[name] if @names_to_index.include? name
    @sparse.push({})
    @names.push name
    @names_to_index[name] = @names_to_index.size
end

def ingest(input)
    File.foreach(input) do |line|
        line = line.split ' '
        to = process_name line.pop
        from = process_name line.pop
        if @sparse[to][from].nil?
            @sparse[from][to] = false
        elsif not @sparse[to][from]
            @sparse[to][from] = @sparse[from][to] = true
        end
    end
    @sparse.each { |row| row.reject! { |k, v| !v } } 
    @sparse.each_index { |i| @sparse[i] = @sparse[i].keys.to_set }
end

def subgraph(set, adj)
    hash = set | adj
    return if @seen.include? hash
    @sets.add set if adj.empty? and set.size > 2
    adj.each {|node| subgraph(set + [node], @sparse[node] & adj)}
    @seen.add hash
end

if ARGV.size != 1
    p "pass the file to ingest as an argument."
    exit
end

ingest(ARGV[0])
@sparse.each_with_index do |row, i|
    subgraph Set.new([i]), row 
end

output = @sets.collect {|set| set.collect {|i| @names[i]}.sort.join(', ')}
output.sort.each {|line| puts line}
